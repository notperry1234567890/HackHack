//Deobfuscated with https://github.com/PetoPetko/Minecraft-Deobfuscator3000 using mappings "1.12 stable mappings"!

package com.gamesense.client.module.modules.misc;

import com.gamesense.api.event.events.DestroyBlockEvent;
import com.gamesense.api.event.events.PacketEvent;
import com.gamesense.api.event.events.PlayerJumpEvent;
import com.gamesense.api.settings.Setting;
import com.gamesense.client.GameSenseMod;
import com.gamesense.client.command.Command;
import com.gamesense.client.module.Module;
import java.text.DecimalFormat;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;
import net.minecraft.util.EnumHand;
import net.minecraftforge.event.entity.living.LivingEntityUseItemEvent;
import net.minecraftforge.event.entity.player.AttackEntityEvent;

public class Announcer extends Module {
  public Announcer() {
    super("Announcer", Module.Category.Misc);
    this.heldItem = "";
    this.blocksPlaced = 0;
    this.blocksBroken = 0;
    this.eaten = 0;
    this.eatListener = new Listener(event -> {
          int randomNum = ThreadLocalRandom.current().nextInt(1, 11);
          if (event.getEntity() == mc.player && (event.getItem().getItem() instanceof net.minecraft.item.ItemFood || event.getItem().getItem() instanceof net.minecraft.item.ItemAppleGold)) {
            this.eaten++;
            if (eattingDelay >= 300 * this.delay.getValue() && this.eat.getValue() && this.eaten > randomNum) {
              Random random = new Random();
              if (this.clientSide.getValue()) {
                Command.sendClientMessage(eatMessages[random.nextInt(eatMessages.length)].replace("{amount}", this.eaten + "").replace("{name}", mc.player.getHeldItemMainhand().getDisplayName()));
              } else {
                mc.player.sendChatMessage(eatMessages[random.nextInt(eatMessages.length)].replace("{amount}", this.eaten + "").replace("{name}", mc.player.getHeldItemMainhand().getDisplayName()));
              } 
              this.eaten = 0;
              eattingDelay = 0;
            } 
          } 
        }new java.util.function.Predicate[0]);
    this.sendListener = new Listener(event -> {
          if (event.getPacket() instanceof net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock && mc.player.getHeldItem(EnumHand.MAIN_HAND).getItem() instanceof net.minecraft.item.ItemBlock) {
            this.blocksPlaced++;
            int randomNum = ThreadLocalRandom.current().nextInt(1, 11);
            if (blockPlacedDelay >= 150 * this.delay.getValue() && this.place.getValue() && this.blocksPlaced > randomNum) {
              Random random = new Random();
              String msg = placeMessages[random.nextInt(placeMessages.length)].replace("{amount}", this.blocksPlaced + "").replace("{name}", mc.player.getHeldItemMainhand().getDisplayName());
              if (this.clientSide.getValue()) {
                Command.sendClientMessage(msg);
              } else {
                mc.player.sendChatMessage(msg);
              } 
              this.blocksPlaced = 0;
              blockPlacedDelay = 0;
            } 
          } 
        }new java.util.function.Predicate[0]);
    this.destroyListener = new Listener(event -> {
          this.blocksBroken++;
          int randomNum = ThreadLocalRandom.current().nextInt(1, 11);
          if (blockBrokeDelay >= 300 * this.delay.getValue() && this.breaking.getValue() && this.blocksBroken > randomNum) {
            Random random = new Random();
            String msg = breakMessages[random.nextInt(breakMessages.length)].replace("{amount}", this.blocksBroken + "").replace("{name}", mc.world.getBlockState(event.getBlockPos()).getBlock().getLocalizedName());
            if (this.clientSide.getValue()) {
              Command.sendClientMessage(msg);
            } else {
              mc.player.sendChatMessage(msg);
            } 
            this.blocksBroken = 0;
            blockBrokeDelay = 0;
          } 
        }new java.util.function.Predicate[0]);
    this.attackListener = new Listener(event -> {
          if (this.attack.getValue() && !(event.getTarget() instanceof net.minecraft.entity.item.EntityEnderCrystal) && attackDelay >= 300 * this.delay.getValue()) {
            String msg = attackMessage.replace("{name}", event.getTarget().getName()).replace("{item}", mc.player.getHeldItemMainhand().getDisplayName());
            if (this.clientSide.getValue()) {
              Command.sendClientMessage(msg);
            } else {
              mc.player.sendChatMessage(msg);
            } 
            attackDelay = 0;
          } 
        }new java.util.function.Predicate[0]);
    this.jumpListener = new Listener(event -> {
          if (this.jump.getValue() && jumpDelay >= 300 * this.delay.getValue()) {
            if (this.clientSide.getValue()) {
              Random random = new Random();
              Command.sendClientMessage(jumpMessages[random.nextInt(jumpMessages.length)]);
            } else {
              Random random = new Random();
              mc.player.sendChatMessage(jumpMessages[random.nextInt(jumpMessages.length)]);
            } 
            jumpDelay = 0;
          } 
        }new java.util.function.Predicate[0]);
  }
  
  public static int blockBrokeDelay = 0;
  
  static int blockPlacedDelay = 0;
  
  static int jumpDelay = 0;
  
  static int attackDelay = 0;
  
  static int eattingDelay = 0;
  
  static long lastPositionUpdate;
  
  static double lastPositionX;
  
  static double lastPositionY;
  
  static double lastPositionZ;
  
  private static double speed;
  
  String heldItem;
  
  int blocksPlaced;
  
  int blocksBroken;
  
  int eaten;
  
  public Setting.Boolean clientSide;
  
  Setting.Boolean walk;
  
  Setting.Boolean place;
  
  Setting.Boolean jump;
  
  Setting.Boolean breaking;
  
  Setting.Boolean attack;
  
  Setting.Boolean eat;
  
  public Setting.Boolean clickGui;
  
  Setting.Integer delay;
  
  public static String walkMessage = "I just walked {blocks} meters thanks to GameSense!";
  
  public static String placeMessage = "I just inserted {amount} {name} into the muliverse thanks to GameSense!";
  
  public static String jumpMessage = "I just hovered in the air thanks to GameSense!";
  
  public static String breakMessage = "I just snapped {amount} {name} out of existance thanks to GameSense!";
  
  public static String attackMessage = "I just disembowed {name} with a {item} thanks to GameSense!";
  
  public static String eatMessage = "I just gobbled up {amount} {name} thanks to GameSense!";
  
  public static String guiMessage = "I just opened my advanced hacking console thanks to GameSense!";
  
  public static String[] walkMessages = new String[] { 
      "I just walked {blocks} meters thanks to GameSense!", "!Ù„Ù‚Ø¯ Ù…Ø´ÙŠØª Ù„Ù„ØªÙˆ Ø¹Ù„Ù‰ Ø¨Ø¹Ø¯ {blocks} Ù…ØªØ± Ù…Ù† Ø§Ù„Ø£Ù…ØªØ§Ø± Ø¨Ù?Ø¶Ù„ GameSense!", "Â¡Acabo de caminar {blocks} metros gracias a GameSense!", "Je viens de marcher {blocks} mÃ¨tres grÃ¢ce Ã  GameSense!", "×¤×©×•×˜ ×”×œ×›×ª×™ {blocks} ×ž×˜×¨×™×? ×‘×–×›×•×ª GameSense!", "Ich bin gerade {blocks} Meter dank GameSense gelaufen!\n", "GameSenseã?®ã?Šã?‹ã?’ã?§{blocks}ãƒ¡ãƒ¼ãƒˆãƒ«æ­©ã?„ã?Ÿã?¨ã?“ã‚?ã?§ã?™!", "Ik heb net {blocks} gelopen met dank aan GameSense!", "ÎœÏŽÎ»Î¹Ï‚ Ï€ÎµÏ?Ï€Î¬Ï„Î·ÏƒÎ± {blocks} Î¼Î­Ï„Ï?Î± Ï‡Î¬Ï?Î· Ï„Î¿ GameSense!", "GameSense sayesinde {blocks} metre yÃ¼rÃ¼dÃ¼m!", 
      "WÅ‚aÅ›nie przeszedÅ‚em {blocks} metry dziÄ™ki GameSense!", "Ð¯ Ð¿Ñ€Ð¾Ñ?Ñ‚Ð¾ Ð¿Ñ€Ð¾ÑˆÐµÐ» {blocks} Ð¼ÐµÑ‚Ñ€Ð¾Ð² Ð±Ð»Ð°Ð³Ð¾Ð´Ð°Ñ€Ñ? GameSense!", "Jeg gik lige {blocks} meter takket vÃ¦re GameSense!", "UnÃ« vetÃ«m eca {blocks} metra falÃ« GameSense!", "å¤šäº?äº†GameSenseï¼Œæˆ‘æ‰?èµ°äº†{blocks}ç±³ï¼?", "KÃ¤velin juuri {blocks} metriÃ¤ GameSensen ansiosta!" };
  
  public static String[] placeMessages = new String[] { 
      "I just inserted {amount} {name} into the muliverse thanks to GameSense!", "Ù„Ù‚Ø¯ Ø£Ø¯Ø±Ø¬Øª Ù„Ù„ØªÙˆ {amount} {name} Ù?ÙŠ muliverse Ø¨Ù?Ø¶Ù„ GameSense!", "Â¡Acabo de insertar {amount} {name} en el universo gracias a GameSense!", "Je viens d'insÃ©rer {amount} {name} dans le mulivers grÃ¢ce Ã  GameSense!", "×”×¨×’×¢ ×”×›× ×¡×ª×™ ×?×ª {amount} {name} ×œ×ž×•×œ×™×‘×¨×¡ ×‘×–×›×•×ª GameSense!", "Ich habe gerade dank GameSense {amount} {name} in das Multiversum eingefÃƒÂ¼gt! \n", "GameSenseã?®ã?Šã?‹ã?’ã?§ã€?{amount} {name}ã‚’ãƒžãƒ«ãƒ?ãƒ?ãƒ¼ã‚¹ã?«æŒ¿å…¥ã?—ã?¾ã?—ã?Ÿï¼?", "Ik heb zojuist {amount} {name} in het muliversum ingevoegd dankzij GameSense!", "ÎœÏŽÎ»Î¹Ï‚ Ï‡Ï?Î·ÏƒÎ¹Î¼Î¿Ï€Î¿Î¹Î®ÏƒÎ± {amount} {name} Ï‡Î¬Ï?Î· Ï„Î¿ GameSense", "GameSense sayesinde birden fazla kiÅŸiye {amount} {name} ekledim!", 
      "WÅ‚aÅ›nie wstawiÅ‚em {amount} {name} do wielu dziÄ™ki GameSense!", "Ð¯ Ñ‚Ð¾Ð»ÑŒÐºÐ¾ Ñ‡Ñ‚Ð¾ Ð²Ñ?Ñ‚Ð°Ð²Ð¸Ð» {amount} {name} Ð²Ð¾ Ð²Ñ?ÐµÐ»ÐµÐ½Ð½ÑƒÑŽ Ð±Ð»Ð°Ð³Ð¾Ð´Ð°Ñ€Ñ? GameSense!", "Jeg har lige indsat {amount} {name} i muliversen takket vÃ¦re GameSense!", "å¤šäº?äº†GameSenseï¼Œæˆ‘åˆšåˆšå°†{amount} {name}æ?’å…¥äº†å¤šäººæ¸¸æˆ?ï¼?", "UnÃ« vetÃ«m futa {amount} {name} nÃ« muliverse falÃ« GameSense!" };
  
  public static String[] jumpMessages = new String[] { 
      "I just hovered in the air thanks to GameSense!", "Ù„Ù‚Ø¯ Ø­ÙˆÙ…Øª Ù„Ù„ØªÙˆ Ù?ÙŠ Ø§Ù„Ù‡ÙˆØ§Ø¡ Ø¨Ù?Ø¶Ù„ GameSense!", "Â¡Acabo de volar en el aire gracias a GameSense!", "Je viens de planer dans les airs grÃ¢ce Ã  GameSense!", "×¤×©×•×˜ ×¨×™×—×¤×ª×™ ×‘×?×•×•×™×¨ ×‘×–×›×•×ª GameSense!", "Ich habe gerade dank GameSense in der Luft geschwebt!\n", "GameSenseã?®ã?Šã?‹ã?’ã?§å®™ã?«æµ®ã?„ã?Ÿã? ã?‘ã?§ã?™ï¼?", "Dankzij GameSense zweefde ik gewoon in de lucht!", "ÎœÏŒÎ»Î¹Ï‚ Î±Î¹Ï‰Ï?Î®Î¸Î·ÎºÎ± ÏƒÏ„Î¿Î½ Î±Î­Ï?Î± Ï‡Î¬Ï?Î·Ï‚ Ï„Î¿ GameSense!", "GameSense sayesinde havada asÄ±lÄ± kaldÄ±m!", 
      "Po prostu unosiÅ‚em siÄ™ w powietrzu dziÄ™ki GameSense!", "Ð¯ Ð¿Ñ€Ð¾Ñ?Ñ‚Ð¾ Ð·Ð°Ð²Ð¸Ñ? Ð² Ð²Ð¾Ð·Ð´ÑƒÑ…Ðµ Ð±Ð»Ð°Ð³Ð¾Ð´Ð°Ñ€Ñ? GameSense!", "UnÃ« thjesht u fiksova nÃ« ajÃ«r falÃ« GameSense!", "å¤šäº?äº†GameSenseï¼Œæˆ‘æ‰?å¾˜å¾Šåœ¨ç©ºä¸­ï¼?", "MinÃ¤ vain leijuin ilmassa GameSensen ansiosta!" };
  
  public static String[] breakMessages = new String[] { 
      "I just snapped {amount} {name} out of existance thanks to GameSense!", "Ù„Ù‚Ø¯ Ù‚Ø·Ø¹Øª Ù„Ù„ØªÙˆ {amount} {name} Ù…Ù† Ø®Ø§Ø±Ø¬ Ø¨Ù?Ø¶Ù„ GameSense!", "Â¡Acabo de sacar {amount} {name} de la existencia gracias a GameSense!", "Je viens de casser {amount} {name} hors de l'existence grÃ¢ce Ã  GameSense!", "×¤×©×•×˜ ×—×˜×¤×ª×™ ×?×ª {amount} {name} ×ž×”×”×ª×§×™×™×? ×‘×–×›×•×ª GameSense!", "Ich habe gerade {amount} {name} dank GameSense aus der Existenz gerissen!", "GameSenseã?®ã?Šã?‹ã?’ã?§ã€?{amount} {name}ã?Œå­˜åœ¨ã?—ã?ªã??ã?ªã‚Šã?¾ã?—ã?Ÿã€‚", "Ik heb zojuist {amount} {name} uit het bestaan â€‹â€‹gehaald dankzij GameSense!", "ÎœÏŽÎ»Î¹Ï‚ Î­ÏƒÏ€Î±ÏƒÎ± Ï„Î¿ {amount} {name} Î±Ï€ÏŒ Ï„Î·Î½ Ï?Ï€Î±Ï?Î¾Î· Ï‡Î¬Ï?Î· ÏƒÏ„Î¿ GameSense!", "GameSense sayesinde {amount} {name} varlÄ±ÄŸÄ±nÄ± yeni Ã§Ä±kardÄ±m!", 
      "WÅ‚aÅ›nie wyskoczyÅ‚em z gry dziÄ™ki {amount} {name} dziÄ™ki GameSense!", "Ð¯ Ñ‚Ð¾Ð»ÑŒÐºÐ¾ Ñ‡Ñ‚Ð¾ Ð¾Ñ‚ÐºÐ»ÑŽÑ‡Ð¸Ð» {amount} {name} Ð¸Ð· Ñ?ÑƒÑ‰ÐµÑ?Ñ‚Ð²Ð¾Ð²Ð°Ð½Ð¸Ñ? Ð±Ð»Ð°Ð³Ð¾Ð´Ð°Ñ€Ñ? GameSense!", "Jeg har lige slÃ¥et {amount} {name} ud af eksistens takket vÃ¦re GameSense!", "å¤šäº?äº†GameSenseï¼Œæˆ‘æ‰?å°†{amount} {name}æ·˜æ±°äº†ï¼?", "Napsautin juuri {amount} {name} olemassaolosta GameSensen ansiosta!" };
  
  public static String[] eatMessages = new String[] { 
      "I just ate {amount} {name} thanks to GameSense!", "Ù„Ù‚Ø¯ Ø£ÙƒÙ„Øª Ù„Ù„ØªÙˆ {amount} {name} Ø¨Ù?Ø¶Ù„ GameSense!", "Â¡Acabo de comer {amount} {name} gracias a GameSense!", "Je viens de manger {amount} {name} grÃ¢ce Ã  GameSense!", "×¤×©×•×˜ ×?×›×œ×ª×™ {amount} {name} ×‘×–×›×•×ª GameSense!", "Ich habe gerade dank GameSense {amount} {name} gegessen!", "GameSenseã?®ã?Šã?‹ã?’ã?§{amount} {name}ã‚’é£Ÿã?¹ã?¾ã?—ã?Ÿã€‚", "Ik heb zojuist {amount} {name} gegeten dankzij GameSense!", "ÎœÏŒÎ»Î¹Ï‚ Î­Ï†Î±Î³Î± {amount} {name} Ï‡Î¬Ï?Î· ÏƒÏ„Î¿ GameSense!", "GameSense sayesinde sadece {amount} {name} yedim!", 
      "WÅ‚aÅ›nie zjadÅ‚em {amount} {name} dziÄ™ki GameSense!", "Jeg spiste lige {amount} {name} takket vÃ¦re GameSense!", "Ð¯ Ñ‚Ð¾Ð»ÑŒÐºÐ¾ Ñ‡Ñ‚Ð¾ Ñ?ÑŠÐµÐ» {amount} {name} Ð±Ð»Ð°Ð³Ð¾Ð´Ð°Ñ€Ñ? GameSense!", "UnÃ« thjesht hÃ«ngra {amount} {name} falÃ« GameSense!", "æ„Ÿè°¢GameSenseï¼Œæˆ‘åˆšå?ƒäº†{amount} {name}ï¼?", "SÃ¶in juuri {amount} {name} Gamessenin ansiosta!" };
  
  @EventHandler
  private final Listener<LivingEntityUseItemEvent.Finish> eatListener;
  
  @EventHandler
  private final Listener<PacketEvent.Send> sendListener;
  
  @EventHandler
  private final Listener<DestroyBlockEvent> destroyListener;
  
  @EventHandler
  private final Listener<AttackEntityEvent> attackListener;
  
  @EventHandler
  private final Listener<PlayerJumpEvent> jumpListener;
  
  public void setup() {
    this.clientSide = registerBoolean("Client Side", "ClientSide", false);
    this.walk = registerBoolean("Walk", "Walk", true);
    this.place = registerBoolean("Place", "Place", true);
    this.jump = registerBoolean("Jump", "Jump", true);
    this.breaking = registerBoolean("Breaking", "Breaking", true);
    this.attack = registerBoolean("Attack", "Attack", true);
    this.eat = registerBoolean("Eat", "Eat", true);
    this.clickGui = registerBoolean("DevGUI", "DevGUI", true);
    this.delay = registerInteger("Delay", "Delay", 1, 1, 20);
  }
  
  public void onUpdate() {
    blockBrokeDelay++;
    blockPlacedDelay++;
    jumpDelay++;
    attackDelay++;
    eattingDelay++;
    this.heldItem = mc.player.getHeldItemMainhand().getDisplayName();
    if (this.walk.getValue() && lastPositionUpdate + 5000L * this.delay.getValue() < System.currentTimeMillis()) {
      double d0 = lastPositionX - mc.player.lastTickPosX;
      double d2 = lastPositionY - mc.player.lastTickPosY;
      double d3 = lastPositionZ - mc.player.lastTickPosZ;
      speed = Math.sqrt(d0 * d0 + d2 * d2 + d3 * d3);
      if (speed > 1.0D && speed <= 5000.0D) {
        String walkAmount = (new DecimalFormat("0.00")).format(speed);
        Random random = new Random();
        if (this.clientSide.getValue()) {
          Command.sendClientMessage(walkMessage.replace("{blocks}", walkAmount));
        } else {
          mc.player.sendChatMessage(walkMessages[random.nextInt(walkMessages.length)].replace("{blocks}", walkAmount));
        } 
        lastPositionUpdate = System.currentTimeMillis();
        lastPositionX = mc.player.lastTickPosX;
        lastPositionY = mc.player.lastTickPosY;
        lastPositionZ = mc.player.lastTickPosZ;
      } 
    } 
  }
  
  public void onEnable() {
    GameSenseMod.EVENT_BUS.subscribe(this);
    this.blocksPlaced = 0;
    this.blocksBroken = 0;
    this.eaten = 0;
    speed = 0.0D;
    blockBrokeDelay = 0;
    blockPlacedDelay = 0;
    jumpDelay = 0;
    attackDelay = 0;
    eattingDelay = 0;
  }
  
  public void onDisable() {
    GameSenseMod.EVENT_BUS.unsubscribe(this);
  }
}
